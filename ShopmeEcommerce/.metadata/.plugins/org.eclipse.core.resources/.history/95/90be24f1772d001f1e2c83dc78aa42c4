package com.shopme.admin.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
import org.springframework.security.config.annotation.web.configuration.WebSecurityCustomizer;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import com.shopme.admin.ShopmeBackEndApplication;


@Configuration
public class WebSecurityConfig{
	/*
	 * @Bean SecurityFilterChain configureHttpSecurity(HttpSecurity http) throws
	 * Exception{ http.authorizeHttpRequests(auth -> auth.anyRequest().permitAll());
	 * return http.build(); }
	 */
	
	  @Bean 
	  public PasswordEncoder passwordEncoder() { 
		  return new BCryptPasswordEncoder(); }
	  
	  @Bean
	  UserDetailsService userDetailsService() {
		  return new ShopmeUserDetailsService();
	  }
	  
	  @Bean
	  DaoAuthenticationProvider authenticationProvider() {
		  DaoAuthenticationProvider authProvider =new DaoAuthenticationProvider();
		  authProvider.setUserDetailsService(userDetailsService());
		  authProvider.setPasswordEncoder(passwordEncoder());
		  return authProvider;
	  }
	 @Bean
	 SecurityFilterChain configureHttp(HttpSecurity http) throws Exception{
		 http.authenticationProvider(authenticationProvider());
		 /*http.authorizeRequests(auth -> auth
				 http.authorizeRequests()
				    .antMatchers("/users/**").hasRole("Admin");*/
				   // .anyRequest().permitAll()
		 		http.authorizeHttpRequests(auth ->auth
		 		//.requestMatchers("/users/**").hasRole("Admin")
		 		.requestMatchers("/category/**").hasAnyAuthority("Admin", "Editor")
				.anyRequest().permitAll()
				)
				//.and()
				.formLogin(	form -> form		
					.loginPage("/login")
					.usernameParameter("email")
					.permitAll())
				.logout(logout->logout.permitAll())
				.rememberMe(reme->reme
						.key("abcxyzt")
						.tokenValiditySeconds(7*24*60*60)
						);
		 		return http.build();
		}

		@Bean
		WebSecurityCustomizer configureWebSecurity() throws Exception {
			return (web) -> web.ignoring().requestMatchers("/images/**", "/js/**", "/webjars/**");
		}
	 

}
